/**
 * Book Cover OCR Service - Advanced book cover analysis
 * Ph√¢n t√≠ch th√¥ng minh b√¨a s√°ch v·ªõi OCR v√† image preprocessing
 */

const pythonBridge = require("./pythonBridge");
const path = require("path");
const fs = require("fs").promises;

class BookCoverOCRService {
  constructor() {
    this.coverTypes = {
      FRONT: 'front',    // B√¨a tr∆∞·ªõc: Title, Author
      INSIDE: 'inside',  // B√¨a trong: ISBN, Publisher, Year
      BACK: 'back',      // B√¨a sau: Description
      SPINE: 'spine'     // G√°y s√°ch: Author (tr√°i) + Title (ph·∫£i)
    };
  }

  /**
   * X·ª≠ l√Ω batch 3 b√¨a s√°ch (spine, inside, back)
   */
  async processCoverBatch(spinePath, insidePath, backPath, languages = ['vi', 'en']) {
    try {

      const results = await Promise.allSettled([
        spinePath ? this.processCover(spinePath, this.coverTypes.SPINE, languages) : null,
        insidePath ? this.processCover(insidePath, this.coverTypes.INSIDE, languages) : null,
        backPath ? this.processCover(backPath, this.coverTypes.BACK, languages) : null
      ]);

      const [spineResult, insideResult, backResult] = results.map(r => 
        r.status === 'fulfilled' ? r.value : null
      );

      // Merge data from all 3 covers
      const bookData = this.mergeBookData(spineResult, insideResult, backResult);

      return {
        success: true,
        bookData,
        details: {
          spine: spineResult,
          inside: insideResult,
          back: backResult
        }
      };
    } catch (error) {
      console.error('[BookCoverOCR] Error processing batch:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * X·ª≠ l√Ω t·ª´ng b√¨a ri√™ng l·∫ª
   */
  async processCover(imagePath, coverType, languages = ['vi', 'en']) {
    try {
      if (!imagePath) return null;

      // Check file exists
      const absolutePath = path.isAbsolute(imagePath)
        ? imagePath
        : path.join(__dirname, '..', imagePath);

      try {
        await fs.access(absolutePath);
      } catch (error) {
        throw new Error(`File kh√¥ng t·ªìn t·∫°i: ${absolutePath}`);
      }

      // ƒêi·ªÅu ch·ªânh th√¥ng s·ªë theo lo·∫°i b√¨a
      let textThreshold = 0.3;
      let lowText = 0.2;
      let contrast = 1.5;
      let brightness = 10;
      let mag_ratio = 1.5;
      let paragraph = true;

      // T·ªëi ∆∞u cho B√åA TRONG (n·ªÅn tr·∫Øng, ch·ªØ ƒëen c√≥ th·ªÉ c√≥ underline)
      if (coverType === this.coverTypes.INSIDE) {
        // B√åA TRONG: C√ÇN B·∫∞NG gi·ªØa enhancement v√† gi·ªØ nguy√™n chi ti·∫øt
        // Underline ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü Python ‚Üí gi·∫£m preprocessing
        textThreshold = 0.35;  // V·ª´a ph·∫£i ƒë·ªÉ nh·∫≠n di·ªán text r√µ nh∆∞ng kh√¥ng qu√° strict
        lowText = 0.25;        // V·ª´a ph·∫£i ƒë·ªÉ gi·ªØ ƒë∆∞·ª£c text nh·∫°t
        contrast = 1.7;        // TƒÉng nh·∫π contrast (thay v√¨ 2.0)
        brightness = 5;        // TƒÉng nh·∫π brightness ƒë·ªÉ text s√°ng h∆°n
        mag_ratio = 1.2;       // Ph√≥ng nh·∫π 20% ƒë·ªÉ text r√µ h∆°n
      }
      
      // T·ªëi ∆∞u cho G√ÅY S√ÅCH (text nh·ªè, c√≥ th·ªÉ xoay d·ªçc)
      if (coverType === this.coverTypes.SPINE) {
        // G√ÅY S√ÅCH: Gi·ªØ paragraph mode ƒë·ªÉ c√≥ bounding boxes ch√≠nh x√°c
        textThreshold = 0.3;   // Gi·ªØ m·∫∑c ƒë·ªãnh
        lowText = 0.2;         // Gi·ªØ m·∫∑c ƒë·ªãnh
        contrast = 2.0;        // TƒÉng m·∫°nh contrast (text nh·ªè c·∫ßn r√µ n√©t)
        brightness = 10;       // TƒÉng brightness ƒë·ªÉ text s√°ng h∆°n
        mag_ratio = 2.0;       // Ph√≥ng to 2x (text nh·ªè c·∫ßn ph√≥ng to)
        paragraph = true;      // PARAGRAPH MODE ƒë·ªÉ c√≥ bounding boxes ƒë√∫ng
      }

      // Call OCR with adjusted parameters
      const ocrResult = await pythonBridge.callEasyOCR(
        absolutePath,
        languages,
        false,          // GPU
        textThreshold,
        lowText,
        paragraph,
        contrast,
        brightness,
        mag_ratio
      );

      if (!ocrResult.success) {
        throw new Error(ocrResult.error || 'OCR failed');
      }

      // Extract book info based on cover type AND font size classification
      const extractedData = this.extractByCoverType(
        ocrResult,
        coverType
      );

      return {
        success: true,
        coverType,
        rawText: ocrResult.text,
        extractedData,
        confidence: ocrResult.confidence || 0,
        processingTime: ocrResult.processingTime || 0,
        detailsCount: ocrResult.details?.length || 0,
        // Th√™m font size classification ƒë·ªÉ FE s·ª≠ d·ª•ng
        classified: ocrResult.classified || null,
        lines: ocrResult.lines || []
      };

    } catch (error) {
      console.error(`[BookCoverOCR] Error processing ${coverType}:`, error);
      return {
        success: false,
        coverType,
        error: error.message
      };
    }
  }

  /**
   * Extract data d·ª±a tr√™n lo·∫°i b√¨a
   */
  extractByCoverType(ocrResult, coverType) {
    const text = ocrResult.text || '';
    const lines = text.split('\n').filter(l => l.trim().length > 0);
    const boxes = ocrResult.boxes || [];
    const classified = ocrResult.classified || null; // Font size classification

    switch (coverType) {
      case this.coverTypes.FRONT:
        return this.extractFrontCover(lines, text, boxes, classified);
      
      case this.coverTypes.INSIDE:
        return this.extractInsideCover(lines, text, boxes, classified);
      
      case this.coverTypes.BACK:
        return this.extractBackCover(lines, text, boxes, classified);
      
      case this.coverTypes.SPINE:
        return this.extractSpineCover(lines, text, boxes, classified);
      
      default:
        return {};
    }
  }

  /**
   * B√åA TR∆Ø·ªöC: Extract Title + Author
   */
  extractFrontCover(lines, fullText, boxes, classified) {
    const data = {
      title: '',
      subtitle: '' // B·ªè author v√† publisher - ch·ªâ l·∫•y ·ªü b√¨a trong
    };

    // ‚ú® S·ª¨ D·ª§NG FONT SIZE CLASSIFICATION (∆∞u ti√™n)
    if (classified) {
      // TITLE: Gh√©p TITLE + SUBTITLE l·∫°i th√†nh ti√™u ƒë·ªÅ ho√†n ch·ªânh
      const titleParts = [];
      if (classified.title && classified.title.length > 0) {
        titleParts.push(classified.title.map(block => block.text).join(' ').trim());
      }
      if (classified.subtitle && classified.subtitle.length > 0) {
        titleParts.push(classified.subtitle.map(block => block.text).join(' ').trim());
      }
      data.title = titleParts.join(' - ').trim(); // Gh√©p v·ªõi d·∫•u "-"

      return data;
    }

    // üì¶ FALLBACK: Old logic n·∫øu kh√¥ng c√≥ classified
    // Title th∆∞·ªùng l√† text l·ªõn nh·∫•t, ·ªü tr√™n c√πng
    // T√¨m d√≤ng c√≥ font size l·ªõn nh·∫•t (d·ª±a v√†o bounding box height)
    if (boxes && boxes.length > 0) {
      const sortedByHeight = [...boxes].sort((a, b) => {
        const heightA = a.box ? Math.abs(a.box[2][1] - a.box[0][1]) : 0;
        const heightB = b.box ? Math.abs(b.box[2][1] - b.box[0][1]) : 0;
        return heightB - heightA;
      });

      // L·∫•y text l·ªõn nh·∫•t l√†m title
      if (sortedByHeight[0]) {
        data.title = sortedByHeight[0].text.trim();
      }

      // T√¨m author - th∆∞·ªùng c√≥ keyword "T√°c gi·∫£", "D·ªãch", ho·∫∑c ·ªü d∆∞·ªõi title
      const authorKeywords = ['t√°c gi·∫£', 'author', 'd·ªãch gi·∫£', 'th·ª±c hi·ªán', 'translator'];
      
      for (const box of boxes) {
        const text = box.text.toLowerCase();
        if (authorKeywords.some(kw => text.includes(kw))) {
          // L·∫•y text sau keyword
          const match = box.text.match(/(?:t√°c gi·∫£|author|d·ªãch gi·∫£)[:\s]+(.+)/i);
          if (match) {
            data.author = match[1].trim();
          }
        }
      }
    }

    // Fallback: Ph√¢n t√≠ch t·ª´ lines
    if (!data.title && lines.length > 0) {
      // D√≤ng ƒë·∫ßu ti√™n th∆∞·ªùng l√† title
      data.title = lines[0].trim();
    }

    if (!data.author) {
      // T√¨m d√≤ng ch·ª©a t√™n t√°c gi·∫£
      for (const line of lines) {
        const authorMatch = line.match(/(?:t√°c gi·∫£|author|d·ªãch)[:\s]+(.+)/i);
        if (authorMatch) {
          data.author = authorMatch[1].trim();
          break;
        }
        
        // N·∫øu kh√¥ng c√≥ keyword, ki·ªÉm tra pattern t√™n ng∆∞·ªùi (2-4 ch·ªØ vi·∫øt hoa)
        const namePattern = /^([A-Zƒê√Ä√Å·∫¢√É·∫†ƒÇ·∫Æ·∫∞·∫≤·∫¥·∫∂√Ç·∫§·∫¶·∫®·∫™·∫¨√à√â·∫∫·∫º·∫∏√ä·∫æ·ªÄ·ªÇ·ªÑ·ªÜ√å√ç·ªàƒ®·ªä√í√ì·ªé√ï·ªå√î·ªê·ªí·ªî·ªñ·ªò∆†·ªö·ªú·ªû·ª†·ª¢√ô√ö·ª¶≈®·ª§∆Ø·ª®·ª™·ª¨·ªÆ·ª∞·ª≤√ù·ª∂·ª∏·ª¥][a-zƒë√†√°·∫£√£·∫°ƒÉ·∫Ø·∫±·∫≥·∫µ·∫∑√¢·∫•·∫ß·∫©·∫´·∫≠√®√©·∫ª·∫Ω·∫π√™·∫ø·ªÅ·ªÉ·ªÖ·ªá√¨√≠·ªâƒ©·ªã√≤√≥·ªè√µ·ªç√¥·ªë·ªì·ªï·ªó·ªô∆°·ªõ·ªù·ªü·ª°·ª£√π√∫·ªß≈©·ª•∆∞·ª©·ª´·ª≠·ªØ·ª±·ª≥√Ω·ª∑·ªπ·ªµ]+\s){1,3}[A-Zƒê√Ä√Å·∫¢√É·∫†ƒÇ·∫Æ·∫∞·∫≤·∫¥·∫∂√Ç·∫§·∫¶·∫®·∫™·∫¨√à√â·∫∫·∫º·∫∏√ä·∫æ·ªÄ·ªÇ·ªÑ·ªÜ√å√ç·ªàƒ®·ªä√í√ì·ªé√ï·ªå√î·ªê·ªí·ªî·ªñ·ªò∆†·ªö·ªú·ªû·ª†·ª¢√ô√ö·ª¶≈®·ª§∆Ø·ª®·ª™·ª¨·ªÆ·ª∞·ª≤√ù·ª∂·ª∏·ª¥][a-zƒë√†√°·∫£√£·∫°ƒÉ·∫Ø·∫±·∫≥·∫µ·∫∑√¢·∫•·∫ß·∫©·∫´·∫≠√®√©·∫ª·∫Ω·∫π√™·∫ø·ªÅ·ªÉ·ªÖ·ªá√¨√≠·ªâƒ©·ªã√≤√≥·ªè√µ·ªç√¥·ªë·ªì·ªï·ªó·ªô∆°·ªõ·ªù·ªü·ª°·ª£√π√∫·ªß≈©·ª•∆∞·ª©·ª´·ª≠·ªØ·ª±·ª≥√Ω·ª∑·ªπ·ªµ]+$/;
        if (namePattern.test(line)) {
          data.author = line.trim();
          break;
        }
      }
    }

    return data;
  }

  /**
   * B√åA TRONG: Extract ISBN + Publisher + Year
   * ‚ú® QU√âT TO√ÄN B·ªò TEXT - T·ªëi ∆∞u pattern matching
   */
  extractInsideCover(lines, fullText, boxes, classified) {
    const data = {
      author: '',
      isbn: '',
      publisher: '',
      year: '',
      copyright: '',
      edition: ''
    };

    // ‚ú® X·ª¨ L√ù TO√ÄN B·ªò TEXT - L·∫•y Publisher, ISBN, Year
    const fullTextTrimmed = fullText.trim();

    // 1Ô∏è‚É£ T√¨m Publisher - ƒê∆†N GI·∫¢N H√ìA (underline ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü preprocessing)
    
    // 1Ô∏è‚É£ T√¨m Publisher - Production-ready
    const publisherMatch = fullTextTrimmed.match(
      /(?:^|\n|\s)nh√†\s*xu·∫•t\s*b·∫£n[\s:]+([^\n]+)/i
    );

    if (publisherMatch && publisherMatch[1]) {
      data.publisher = publisherMatch[1]
        .trim()
        .replace(/\s*(?:\||ƒê·ªãa\s*ch·ªâ|ƒêC|DT|Tel|T·∫ßng|√î|Ph√≤ng|S·ªë|Qƒê).*$/i, '')
        .replace(/\s*\d{2,}.*$/g, '')
        .replace(/\s*[-,]\s*\d+.*$/g, '')
        .trim();              
    }

    // 2Ô∏è‚É£ T√¨m ISBN (trong to√†n b·ªô text) - Enhanced logic
    /**
     * Extract ISBN t·ª´ text
     * Handle cases:
     * - "ISBN: 978-604-304-155-2"
     * - "ISBN b·∫£n ti·∫øng Vi·ªát: 978-604-304-155-2"
     * - "M√£ ISBN E: 978-604-304-155-2"
     * - "ISBN 9786043041552" (kh√¥ng c√≥ d·∫•u g·∫°ch ngang)
     */
    const extractISBN = (text) => {
      // Pattern 1: "ISBN" + b·∫•t k·ª≥ text n√†o + ":" + s·ªë ISBN
      let isbnMatch = text.match(/ISBN[^:]*?:\s*(\d{3}[-\s]?\d{1,5}[-\s]?\d{1,7}[-\s]?\d{1,7}[-\s]?\d{1})/i);
      
      if (isbnMatch) {
        return isbnMatch[1].replace(/[-\s]/g, '');
      }
      
      // Pattern 2: "ISBN" + spaces + s·ªë (kh√¥ng c√≥ d·∫•u ":")
      isbnMatch = text.match(/ISBN\s+(\d{3}[-\s]?\d{1,5}[-\s]?\d{1,7}[-\s]?\d{1,7}[-\s]?\d{1})/i);
      
      if (isbnMatch) {
        return isbnMatch[1].replace(/[-\s]/g, '');
      }
      
      // Pattern 3: T√¨m b·∫•t k·ª≥ s·ªë ISBN-13 n√†o (978 ho·∫∑c 979 b·∫Øt ƒë·∫ßu)
      isbnMatch = text.match(/\b(97[89][-\s]?\d{1,5}[-\s]?\d{1,7}[-\s]?\d{1,7}[-\s]?\d{1})\b/);
      
      if (isbnMatch) {
        return isbnMatch[1].replace(/[-\s]/g, '');
      }
      
      return null;
    };

    data.isbn = extractISBN(fullTextTrimmed);
    if (data.isbn) {
    }

    // 3Ô∏è‚É£ T√¨m Year (l·∫•y nƒÉm cu·ªëi c√πng trong text)
    const yearPattern = /\b(20\d{2})\b/g;
    const yearMatches = fullTextTrimmed.match(yearPattern);
    if (yearMatches && yearMatches.length > 0) {
      data.year = yearMatches[yearMatches.length - 1];
    }

    return data;
  }

    /**
   * B√åA SAU: Ch·ªâ l·∫•y ph·∫ßn m√¥ t·∫£ (d·ª´ng ·ªü gap l·ªõn)
   */
  extractBackCover(lines, fullText, boxes, classified) {
    const data = { description: '', isbn: '' };

    // L·∫•y body blocks n·∫øu c√≥ classification
    if (classified?.body && classified.body.length > 0) {
      data.description = classified.body.map(b => b.text).join(' ').trim();
    }
    // Fallback: Split fullText by double newlines, l·∫•y ph·∫ßn ƒë·∫ßu
    else if (fullText) {
      const sections = fullText.split(/\n\n+/);
      data.description = sections[0]?.trim() || '';
      
      // Gh√©p th√™m section 2 n·∫øu section 1 qu√° ng·∫Øn v√† section 2 kh√¥ng ph·∫£i info
      if (data.description.length < 100 && sections[1] && 
          !/^(ISBN|GI√Å|Shine|AZ|NH√Ä\s*XU·∫§T)/i.test(sections[1])) {
        data.description += '\n\n' + sections[1].trim();
      }
    }

    // Extract ISBN
    const isbnMatch = fullText?.match(/ISBN[\s:-]*(\d{3}[-\s]?\d{1,5}[-\s]?\d{1,7}[-\s]?\d{1,7}[-\s]?\d{1})/i);
    if (isbnMatch) {
      data.isbn = isbnMatch[1].replace(/[-\s]/g, '');
      // Remove ISBN from description
      data.description = data.description.replace(/ISBN[\s:-]*\d{3}[-\s]?\d{1,5}[-\s]?\d{1,7}[-\s]?\d{1,7}[-\s]?\d{1}/gi, '').trim();
    }

    // Cleanup
    data.description = data.description
      .replace(/(?:GI√Å|gi√°)[:\s]*[\d,.]+\s*(?:‚Ç´|VND)/gi, '')  // Remove price
      .replace(/\d{8,}/g, '')  // Remove barcode
      .replace(/(?:Shine|AZ\s*VIETNAM|NH√Ä\s*XU·∫§T\s*B·∫¢N).*$/i, '')  // Remove publisher
      .trim();

    return data;
  }

  /**
   * G√ÅY S√ÅCH (SPINE): Extract Author (tr√°i) + Title (ph·∫£i)
   * Text tr√™n g√°y s√°ch th∆∞·ªùng ƒë∆∞·ª£c x·∫øp theo chi·ªÅu d·ªçc, OCR s·∫Ω ƒë·ªçc t·ª´ tr√°i sang ph·∫£i
   * Layout: [T√°c gi·∫£] | [T√™n s√°ch]
   */
  extractSpineCover(lines, fullText, boxes, classified) {
    const data = {
      author: '',
      title: ''
    };

    // Ph√¢n t√≠ch d·ª±a tr√™n KHO·∫¢NG C√ÅCH gi·ªØa c√°c boxes (t√¨m "gap l·ªõn")
    if (boxes && boxes.length >= 2) {
      // L·ªçc boxes h·ª£p l·ªá
      const validBoxes = boxes.filter(box => 
        box.text && 
        box.text.trim().length > 0 &&
        box.box && 
        Array.isArray(box.box) && 
        box.box.length === 4
      );

      if (validBoxes.length >= 2) {
        // Sort boxes theo t·ªça ƒë·ªô X (tr√°i -> ph·∫£i)
        const sortedByX = [...validBoxes].sort((a, b) => {
          const xA = a.box[0][0];
          const xB = b.box[0][0];
          return xA - xB;
        });

        sortedByX.forEach((box, idx) => {
          const x = box.box[0][0];
        });

        // T√≠nh kho·∫£ng c√°ch gi·ªØa c√°c boxes li√™n ti·∫øp
        const gaps = [];
        for (let i = 0; i < sortedByX.length - 1; i++) {
          // C·∫°nh ph·∫£i c·ªßa box hi·ªán t·∫°i
          const currentBoxRightX = Math.max(...sortedByX[i].box.map(p => p[0]));
          // C·∫°nh tr√°i c·ªßa box ti·∫øp theo
          const nextBoxLeftX = Math.min(...sortedByX[i + 1].box.map(p => p[0]));
          // Kho·∫£ng c√°ch (gap)
          const gap = nextBoxLeftX - currentBoxRightX;
          
          gaps.push({
            index: i,
            gap: gap,
            leftText: sortedByX[i].text,
            rightText: sortedByX[i + 1].text
          });
          
        }

        // T√¨m gap L·ªöN NH·∫§T (ƒë√¢y l√† ranh gi·ªõi author/title)
        if (gaps.length > 0) {
          const maxGap = gaps.reduce((max, g) => g.gap > max.gap ? g : max, gaps[0]);

          // Chia boxes th√†nh 2 nh√≥m t·∫°i v·ªã tr√≠ gap l·ªõn nh·∫•t
          const authorBoxes = sortedByX.slice(0, maxGap.index + 1);
          const titleBoxes = sortedByX.slice(maxGap.index + 1);

          data.author = authorBoxes.map(b => b.text).join(' ').trim();
          data.title = titleBoxes.map(b => b.text).join(' ').trim();

        }
      }
    }

    // Fallback: N·∫øu kh√¥ng t√°ch ƒë∆∞·ª£c b·∫±ng boxes, d√πng text analysis
    if (!data.author || !data.title) {
      
      let fullTextTrimmed = fullText.trim();
      
      // Cleanup ch·ªâ x√≥a noise r√µ r√†ng (s·ªë, logo)
      fullTextTrimmed = fullTextTrimmed
        .replace(/^[0-9\s\+\-=#,\.]+/g, '')
        .replace(/[+#=,\.'\s]*(?:shi|shine)\s*(?:books?)?$/i, '')
        .trim();
    
      // T√¨m 2 t·ª´ IN HOA ƒë·∫ßu ti√™n (t√°c gi·∫£ ti·∫øng Vi·ªát)
      const vietnameseAuthorPattern = /\b([A-Z√Ä√Å·∫¢√É·∫†ƒÇ·∫Æ·∫∞·∫≤·∫¥·∫∂√Ç·∫§·∫¶·∫®·∫™·∫¨√à√â·∫∫·∫º·∫∏√ä·∫æ·ªÄ·ªÇ·ªÑ·ªÜ√å√ç·ªàƒ®·ªä√í√ì·ªé√ï·ªå√î·ªê·ªí·ªî·ªñ·ªò∆†·ªö·ªú·ªû·ª†·ª¢√ô√ö·ª¶≈®·ª§∆Ø·ª®·ª™·ª¨·ªÆ·ª∞·ª≤√ù·ª∂·ª∏·ª¥ƒê]{2,}\s+[A-Z√Ä√Å·∫¢√É·∫†ƒÇ·∫Æ·∫∞·∫≤·∫¥·∫∂√Ç·∫§·∫¶·∫®·∫™·∫¨√à√â·∫∫·∫º·∫∏√ä·∫æ·ªÄ·ªÇ·ªÑ·ªÜ√å√ç·ªàƒ®·ªä√í√ì·ªé√ï·ªå√î·ªê·ªí·ªî·ªñ·ªò∆†·ªö·ªú·ªû·ª†·ª¢√ô√ö·ª¶≈®·ª§∆Ø·ª®·ª™·ª¨·ªÆ·ª∞·ª≤√ù·ª∂·ª∏·ª¥ƒê]{2,})\b/;
      const authorMatch = fullTextTrimmed.match(vietnameseAuthorPattern);
      
      if (authorMatch) {
        data.author = authorMatch[1].trim();
        const authorIndex = fullTextTrimmed.indexOf(data.author);
        
        if (authorIndex !== -1) {
          // L·∫•y ph·∫ßn SAU author
          let titlePart = fullTextTrimmed.substring(authorIndex + data.author.length).trim();
          
          // X√≥a CH·ªà k√Ω t·ª± ph√¢n c√°ch r√µ r√†ng ·ªü ƒë·∫ßu (|, +, -, =, #, v.v.)
          titlePart = titlePart.replace(/^[|\+\-=#,\.\s]+/, '').trim();
          
          // KH√îNG fix l·ªói OCR t·ª± ƒë·ªông - gi·ªØ nguy√™n text nh∆∞ OCR ƒë·ªçc ƒë∆∞·ª£c
          data.title = titlePart;
          
        }
      } 
      // Fallback: Author n∆∞·ªõc ngo√†i
      else {
        const foreignPattern = /\b([A-Z][a-z]+(?:[-\.]\s*[A-Z][a-z]+)*(?:\s+[A-Z][a-z]+(?:[-\.]\s*[A-Z][a-z]+)*){1,3})\b/;
        const foreignMatch = fullTextTrimmed.match(foreignPattern);
        
        if (foreignMatch) {
          data.author = foreignMatch[1].trim();
          const authorIndex = fullTextTrimmed.indexOf(data.author);
          if (authorIndex !== -1) {
            data.title = fullTextTrimmed
              .substring(authorIndex + data.author.length)
              .replace(/^[|\+\-=#,\.\s]+/, '')
              .trim();
          }
        } else {
          // Kh√¥ng t√¨m ƒë∆∞·ª£c author ‚Üí coi to√†n b·ªô l√† title
          data.title = fullTextTrimmed;
        }
      }
    }

    return data;
  }

  /**
   * Merge data t·ª´ c·∫£ 3 b√¨a th√†nh 1 book object ho√†n ch·ªânh
   */
  mergeBookData(spineData, insideData, backData) {
    const bookData = {
      title: '',
      author: '',
      subtitle: '',
      publisher: '',
      year_published: '',
      isbn: '',
      description: '',
      copyright: '',
      edition: '',
      reviews: [],
      confidence: {
        title: 0,
        author: 0,
        publisher: 0
      }
    };

    // Spine cover data - L·∫§Y TITLE + AUTHOR
    if (spineData?.success && spineData.extractedData) {
      bookData.title = spineData.extractedData.title || '';
      bookData.author = spineData.extractedData.author || '';
      bookData.confidence.title = spineData.confidence || 0;
      bookData.confidence.author = spineData.confidence || 0;
    }

    // Inside cover data - L·∫§Y ISBN + PUBLISHER + YEAR (v√† fallback author n·∫øu spine kh√¥ng c√≥)
    if (insideData?.success && insideData.extractedData) {
      // Ch·ªâ l·∫•y author t·ª´ inside n·∫øu spine kh√¥ng c√≥
      if (!bookData.author && insideData.extractedData.author) {
        bookData.author = insideData.extractedData.author;
        bookData.confidence.author = insideData.confidence || 0;
      }
      bookData.isbn = insideData.extractedData.isbn || '';
      bookData.publisher = insideData.extractedData.publisher || '';
      bookData.year_published = insideData.extractedData.year || '';
      bookData.copyright = insideData.extractedData.copyright || '';
      bookData.edition = insideData.extractedData.edition || '';
      bookData.confidence.publisher = insideData.confidence || 0;
    }

    // Back cover data - L·∫§Y TO√ÄN B·ªò DESCRIPTION
    if (backData?.success && backData.extractedData) {
      bookData.description = backData.extractedData.description || '';
      // Fallback ISBN t·ª´ b√¨a sau n·∫øu b√¨a trong kh√¥ng c√≥
      if (!bookData.isbn && backData.extractedData.isbn) {
        bookData.isbn = backData.extractedData.isbn;
      }
    }

    // Post-processing: Clean v√† validate
    bookData.title = this.cleanText(bookData.title);
    bookData.author = this.cleanText(bookData.author);
    bookData.publisher = this.cleanText(bookData.publisher);
    bookData.description = this.cleanText(bookData.description);

    // Convert author string to array if contains comma
    if (bookData.author && bookData.author.includes(',')) {
      bookData.author = bookData.author.split(',').map(a => a.trim());
    } else if (bookData.author) {
      bookData.author = [bookData.author];
    } else {
      bookData.author = [];
    }

    return bookData;
  }

  /**
   * Clean text: remove extra spaces, special chars
   */
  cleanText(text) {
    if (!text) return '';
    return text
      .replace(/\s+/g, ' ')
      .replace(/[^\w\s√Ä-·ªπƒÇƒÉƒêƒë√ä√™√î√¥∆†∆°∆Ø∆∞.,!?;:()"'\/\-]/g, '')
      .trim();
  }
}

module.exports = new BookCoverOCRService();