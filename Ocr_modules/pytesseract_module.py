"""
Pytesseract Module for Vietnamese Text Recognition
"""

import pytesseract
import numpy as np
from PIL import Image
import time
import os
from .opencv_module import OpenCVProcessor

class PytesseractProcessor:
    def __init__(self, tesseract_cmd=None):
        """
        Kh·ªüi t·∫°o Pytesseract processor
        
        Args:
            tesseract_cmd: ƒê∆∞·ªùng d·∫´n ƒë·∫øn tesseract executable (None ƒë·ªÉ t·ª± ƒë·ªông t√¨m)
        """
        print("ƒêang kh·ªüi t·∫°o Pytesseract...")
        self.opencv_processor = OpenCVProcessor()
        
        # Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n tesseract n·∫øu c·∫ßn
        if tesseract_cmd:
            pytesseract.pytesseract.tesseract_cmd = tesseract_cmd
        else:
            # T·ª± ƒë·ªông t√¨m ƒë∆∞·ªùng d·∫´n Tesseract cho Windows
            if os.name == 'nt':  # Windows
                possible_paths = [
                    r'C:\Program Files\Tesseract-OCR\tesseract.exe',
                    r'C:\Program Files (x86)\Tesseract-OCR\tesseract.exe',
                    r'C:\Users\{}\AppData\Local\Tesseract-OCR\tesseract.exe'.format(os.getenv('USERNAME', '')),
                ]
                
                for path in possible_paths:
                    if os.path.exists(path):
                        pytesseract.pytesseract.tesseract_cmd = path
                        print(f"‚úì T√¨m th·∫•y Tesseract t·∫°i: {path}")
                        break
        
        # Ki·ªÉm tra tesseract c√≥ ho·∫°t ƒë·ªông kh√¥ng
        try:
            pytesseract.get_tesseract_version()
            print("‚úì Pytesseract ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói kh·ªüi t·∫°o Pytesseract: {str(e)}")
            print("üí° H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t:")
            print("   - Windows: T·∫£i v√† c√†i ƒë·∫∑t t·ª´ https://github.com/UB-Mannheim/tesseract/wiki")
            print("   - Ho·∫∑c: choco install tesseract")
            print("   - Ho·∫∑c: winget install --id UB-Mannheim.TesseractOCR")
    
    def extract_text(self, image_path, lang='vie+eng', confidence_threshold=30):
        """
        Tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ ·∫£nh b·∫±ng Pytesseract
        
        Args:
            image_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh ho·∫∑c numpy array
            lang: Ng√¥n ng·ªØ ('vie+eng' cho ti·∫øng Vi·ªát + Anh)
            confidence_threshold: Ng∆∞·ª°ng ƒë·ªô tin c·∫≠y t·ªëi thi·ªÉu
            
        Returns:
            Dictionary ch·ª©a k·∫øt qu·∫£ OCR
        """
        start_time = time.time()
        
        try:
            # S·ª≠ d·ª•ng OpenCV ƒë·ªÉ t·ªëi ∆∞u ·∫£nh cho Tesseract
            if isinstance(image_path, str):
                optimized_path = self.opencv_processor.get_optimized_image_for_ocr(image_path, 'tesseract')
                input_path = optimized_path if optimized_path else image_path
                
                if not os.path.exists(input_path):
                    raise ValueError(f"Kh√¥ng t√¨m th·∫•y file: {input_path}")
                image = Image.open(input_path)
            else:
                # Numpy array - s·ª≠ d·ª•ng tr·ª±c ti·∫øp
                if len(image_path.shape) == 3:
                    # Chuy·ªÉn t·ª´ OpenCV (BGR) sang PIL (RGB)
                    image = Image.fromarray(image_path[:, :, ::-1])
                else:
                    image = Image.fromarray(image_path)
                optimized_path = None
            
            # C·∫•u h√¨nh Tesseract
            custom_config = r'--oem 3 --psm 6'
            
            # Tr√≠ch xu·∫•t text v·ªõi confidence
            data = pytesseract.image_to_data(
                image, 
                lang=lang, 
                config=custom_config, 
                output_type=pytesseract.Output.DICT
            )
            
            # L·ªçc k·∫øt qu·∫£ theo confidence
            extracted_text = []
            confidence_scores = []
            
            for i in range(len(data['text'])):
                text = data['text'][i].strip()
                conf = int(data['conf'][i])
                
                if text and conf > confidence_threshold:
                    extracted_text.append(text)
                    confidence_scores.append(conf / 100.0)  # Chuy·ªÉn v·ªÅ 0-1
            
            # Tr√≠ch xu·∫•t text ƒë·∫ßy ƒë·ªß (kh√¥ng l·ªçc confidence)
            full_text = pytesseract.image_to_string(image, lang=lang, config=custom_config).strip()
            
            processing_time = time.time() - start_time
            avg_confidence = np.mean(confidence_scores) if confidence_scores else 0
            
            # T√≠nh to√°n s·ªë t·ª´ trung b√¨nh v√† t·ª∑ l·ªá th√†nh c√¥ng
            word_count = len(extracted_text)
            success_rate = 1.0 if full_text.strip() else 0.0
            avg_words = word_count if word_count > 0 else 0
            accuracy = avg_confidence
            
            # D·ªçn d·∫πp file t·∫°m n·∫øu c√≥
            if optimized_path:
                try:
                    os.remove(optimized_path)
                except:
                    pass
            
            return {
                'text': full_text,
                'processing_time': processing_time,
                'success_rate': success_rate,
                'avg_words': avg_words,
                'accuracy': accuracy
            }
            
        except Exception as e:
            return {
                'text': '',
                'processing_time': time.time() - start_time,
                'success_rate': 0.0,
                'avg_words': 0,
                'accuracy': 0.0,
                'error': str(e)
            }
    
    def extract_text_with_preprocessing(self, processed_image, lang='vie+eng', confidence_threshold=30):
        """
        Tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ ·∫£nh ƒë√£ ƒë∆∞·ª£c ti·ªÅn x·ª≠ l√Ω
        
        Args:
            processed_image: ·∫¢nh ƒë√£ ƒë∆∞·ª£c ti·ªÅn x·ª≠ l√Ω (numpy array)
            lang: Ng√¥n ng·ªØ
            confidence_threshold: Ng∆∞·ª°ng ƒë·ªô tin c·∫≠y
            
        Returns:
            Dictionary ch·ª©a k·∫øt qu·∫£ OCR
        """
        return self.extract_text(processed_image, lang, confidence_threshold)
    
    def get_available_languages(self):
        """
        L·∫•y danh s√°ch ng√¥n ng·ªØ c√≥ s·∫µn
        
        Returns:
            List c√°c ng√¥n ng·ªØ h·ªó tr·ª£
        """
        try:
            return pytesseract.get_languages()
        except Exception as e:
            print(f"L·ªói l·∫•y danh s√°ch ng√¥n ng·ªØ: {str(e)}")
            return []
    
    def extract_text_with_custom_config(self, image_path, custom_config, lang='vie+eng'):
        """
        Tr√≠ch xu·∫•t text v·ªõi c·∫•u h√¨nh t√πy ch·ªânh
        
        Args:
            image_path: ƒê∆∞·ªùng d·∫´n ·∫£nh
            custom_config: C·∫•u h√¨nh Tesseract t√πy ch·ªânh
            lang: Ng√¥n ng·ªØ
            
        Returns:
            Dictionary ch·ª©a k·∫øt qu·∫£ OCR
        """
        start_time = time.time()
        
        try:
            if isinstance(image_path, str):
                image = Image.open(image_path)
            else:
                # Numpy array
                if len(image_path.shape) == 3:
                    # Chuy·ªÉn t·ª´ OpenCV (BGR) sang PIL (RGB)
                    image = Image.fromarray(image_path[:, :, ::-1])
                else:
                    image = Image.fromarray(image_path)
            
            text = pytesseract.image_to_string(image, lang=lang, config=custom_config).strip()
            
            processing_time = time.time() - start_time
            
            # T√≠nh to√°n s·ªë t·ª´ trung b√¨nh v√† t·ª∑ l·ªá th√†nh c√¥ng
            word_count = len(text.split()) if text else 0
            success_rate = 1.0 if text.strip() else 0.0
            avg_words = word_count if word_count > 0 else 0
            accuracy = 1.0 if text.strip() else 0.0  # Kh√¥ng c√≥ confidence score cho method n√†y
            
            return {
                'text': text,
                'processing_time': processing_time,
                'success_rate': success_rate,
                'avg_words': avg_words,
                'accuracy': accuracy
            }
            
        except Exception as e:
            return {
                'text': '',
                'processing_time': time.time() - start_time,
                'success_rate': 0.0,
                'avg_words': 0,
                'accuracy': 0.0,
                'error': str(e)
            }
    
    def test_different_psm_modes(self, image_path, lang='vie+eng'):
        """
        Test c√°c ch·∫ø ƒë·ªô PSM kh√°c nhau
        
        Args:
            image_path: ƒê∆∞·ªùng d·∫´n ·∫£nh
            lang: Ng√¥n ng·ªØ
            
        Returns:
            Dictionary ch·ª©a k·∫øt qu·∫£ c√°c ch·∫ø ƒë·ªô PSM
        """
        psm_modes = {
            3: "Fully automatic page segmentation, but no OSD",
            6: "Uniform block of text",
            7: "Single text line",
            8: "Single word",
            11: "Sparse text",
            13: "Raw line. Treat image as single text line"
        }
        
        results = {}
        
        for psm, description in psm_modes.items():
            config = f'--oem 3 --psm {psm}'
            result = self.extract_text_with_custom_config(image_path, config, lang)
            result['description'] = description
            results[f'psm_{psm}'] = result
            
            print(f"PSM {psm} ({description}): "
                  f"{result['avg_words']} t·ª´, "
                  f"{result['processing_time']:.2f}s, "
                  f"ƒê·ªô ch√≠nh x√°c: {result['accuracy']:.2f}")
        
        return results
